{
  "id": "slack",
  "groups": ["Samples", "Slack"],
  "name": "Slack",
  "description": "Slack Web API",
  "system": "slack",
  "type": "System",
  "specification": {
    "openapi": "3.0.0",
    "info": {
      "contact": {
        "name": "Slack developer relations",
        "url": "https://api.slack.com/support"
      },
      "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
      "title": "Slack Web API",
      "version": "1.7.0-oas3"
    },
    "tags": [],
    "servers": [
      {
        "url": "https://api.slack.com/web",
        "x-environment": "Development"
      }
    ],
    "paths": {
      "/chat.postMessage": {
        "post": {
          "description": "Sends a message to a channel.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://api.slack.com/methods/chat.postMessage"
          },
          "operationId": "chat_postMessage",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "as_user": {
                      "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.",
                      "type": "string"
                    },
                    "attachments": {
                      "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
                      "type": "string"
                    },
                    "blocks": {
                      "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
                      "type": "string"
                    },
                    "channel": {
                      "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
                      "type": "string"
                    },
                    "icon_emoji": {
                      "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
                      "type": "string"
                    },
                    "icon_url": {
                      "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                      "type": "string"
                    },
                    "link_names": {
                      "description": "Find and link channel names and usernames.",
                      "type": "boolean"
                    },
                    "mrkdwn": {
                      "description": "Disable Slack markup parsing by setting to `false`. Enabled by default.",
                      "type": "boolean"
                    },
                    "parse": {
                      "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
                      "type": "string"
                    },
                    "reply_broadcast": {
                      "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
                      "type": "boolean"
                    },
                    "text": {
                      "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
                      "type": "string"
                    },
                    "thread_ts": {
                      "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
                      "type": "string"
                    },
                    "unfurl_links": {
                      "description": "Pass true to enable unfurling of primarily text-based content.",
                      "type": "boolean"
                    },
                    "unfurl_media": {
                      "description": "Pass false to disable unfurling of media content.",
                      "type": "boolean"
                    },
                    "username": {
                      "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                      "type": "string"
                    }
                  },
                  "required": ["channel"]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Typical success response",
              "content": {
                "application/json": {
                  "schema": {
                    "additionalProperties": false,
                    "description": "Schema for successful response of chat.postMessage method",
                    "properties": {
                      "channel": {
                        "$ref": "#/components/schemas/defs_channel"
                      },
                      "message": {
                        "$ref": "#/components/schemas/objs_message"
                      },
                      "ok": {
                        "$ref": "#/components/schemas/defs_ok_true"
                      },
                      "ts": {
                        "$ref": "#/components/schemas/defs_ts"
                      }
                    },
                    "required": ["ok", "channel", "ts", "message"],
                    "title": "chat.postMessage success schema",
                    "type": "object"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "channel": "C1H9RESGL",
                        "message": {
                          "attachments": [
                            {
                              "fallback": "This is an attachment's fallback",
                              "id": 1,
                              "text": "This is an attachment"
                            }
                          ],
                          "bot_id": "B19LU7CSY",
                          "subtype": "bot_message",
                          "text": "Here's a message for you",
                          "ts": "1503435956.000247",
                          "type": "message",
                          "username": "ecto1"
                        },
                        "ok": true,
                        "ts": "1503435956.000247"
                      }
                    }
                  }
                }
              }
            },
            "default": {
              "description": "Typical error response if too many attachments are included",
              "content": {
                "application/json": {
                  "schema": {
                    "additionalProperties": false,
                    "description": "Schema for error response chat.postMessage method",
                    "properties": {
                      "callstack": {
                        "description": "Note: PHP callstack is only visible in dev/qa",
                        "type": "string"
                      },
                      "error": {
                        "enum": [
                          "channel_not_found",
                          "not_in_channel",
                          "is_archived",
                          "msg_too_long",
                          "no_text",
                          "too_many_attachments",
                          "rate_limited",
                          "not_authed",
                          "invalid_auth",
                          "account_inactive",
                          "invalid_arg_name",
                          "invalid_array_arg",
                          "invalid_charset",
                          "invalid_form_data",
                          "invalid_post_type",
                          "missing_post_type"
                        ],
                        "type": "string"
                      },
                      "ok": {
                        "$ref": "#/components/schemas/defs_ok_false"
                      }
                    },
                    "required": ["ok", "error"],
                    "title": "chat.postMessage error schema",
                    "type": "object"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "error": "too_many_attachments",
                        "ok": false
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "slackAuth": ["chat:write:user", "chat:write:bot"]
            }
          ],
          "tags": ["chat"]
        }
      }
    },
    "components": {
      "securitySchemes": {
        "slackAuth": {
          "type": "oauth2",
          "flows": {
            "authorizationCode": {
              "authorizationUrl": "https://slack.com/oauth/authorize",
              "tokenUrl": "https://slack.com/api/oauth.access",
              "scopes": {
                "chat:write": "chat:write",
                "chat:write:bot": "Author messages as a bot",
                "chat:write:user": "Author messages as a user"
              }
            }
          }
        }
      },
      "schemas": {
        "blocks": {
          "description": "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.",
          "items": {
            "additionalProperties": true,
            "properties": {
              "type": {
                "type": "string"
              }
            },
            "required": ["type"],
            "type": "object"
          },
          "title": "Block Kit blocks",
          "type": "array"
        },
        "defs_app_id": {
          "pattern": "^A[A-Z0-9]{1,}$",
          "title": "App ID",
          "type": "string"
        },
        "defs_bot_id": {
          "pattern": "^B[A-Z0-9]{8,}$",
          "title": "Bot User ID",
          "type": "string"
        },
        "defs_channel": {
          "pattern": "^[CGD][A-Z0-9]{8,}$",
          "title": "Channel-like conversation ID",
          "type": "string"
        },
        "defs_channel_id": {
          "pattern": "^[C][A-Z0-9]{2,}$",
          "title": "Channel ID",
          "type": "string"
        },
        "defs_channel_name": {
          "title": "Name of a channel",
          "type": "string"
        },
        "defs_comment_id": {
          "pattern": "^Fc[A-Z0-9]{8,}$",
          "title": "File Comment ID",
          "type": "string"
        },
        "defs_dm_id": {
          "pattern": "^[D][A-Z0-9]{8,}$",
          "title": "Direct Message Channel ID",
          "type": "string"
        },
        "defs_enterprise_id": {
          "pattern": "^[E][A-Z0-9]{8,}$",
          "title": "Enterprise ID",
          "type": "string"
        },
        "defs_enterprise_name": {
          "title": "Name of the enterprise org",
          "type": "string"
        },
        "defs_enterprise_user_id": {
          "pattern": "^[WU][A-Z0-9]{8,}$",
          "title": "Enterprise User ID",
          "type": "string"
        },
        "defs_file_id": {
          "pattern": "^[F][A-Z0-9]{8,}$",
          "title": "File ID",
          "type": "string"
        },
        "defs_group_id": {
          "pattern": "^[G][A-Z0-9]{8,}$",
          "title": "Private Channel ID",
          "type": "string"
        },
        "defs_ok_false": {
          "enum": [false],
          "title": "default failure response",
          "type": "boolean"
        },
        "defs_ok_true": {
          "enum": [true],
          "title": "default success response",
          "type": "boolean"
        },
        "defs_optional_app_id": {
          "pattern": "^(A[A-Z0-9]{1,})?$",
          "title": "App ID or empty string",
          "type": "string"
        },
        "defs_pinned_info": {
          "additionalProperties": false,
          "title": "Info for a pinned item",
          "type": "object"
        },
        "defs_reminder_id": {
          "pattern": "^Rm[A-Z0-9]{8,}$",
          "title": "Reminder ID",
          "type": "string"
        },
        "defs_subteam_id": {
          "pattern": "^S[A-Z0-9]{2,}$",
          "title": "Subteam ID",
          "type": "string"
        },
        "defs_team": {
          "pattern": "^[T][A-Z0-9]{2,}$",
          "title": "Team ID",
          "type": "string"
        },
        "defs_topic_purpose_creator": {
          "pattern": "^[UW][A-Z0-9]{8,}$|^$",
          "title": "User ID or empty string, used for topic and purpose creation",
          "type": "string"
        },
        "defs_ts": {
          "pattern": "^\\d{10}\\.\\d{6}$",
          "title": "Timestamp in format 0123456789.012345",
          "type": "string"
        },
        "defs_user_id": {
          "pattern": "^[UW][A-Z0-9]{2,}$",
          "title": "User ID",
          "type": "string"
        },
        "defs_workspace_id": {
          "pattern": "^[TE][A-Z0-9]{8,}$",
          "title": "Team or Enterprise ID",
          "type": "string"
        },
        "objs_message": {
          "additionalProperties": false,
          "properties": {
            "attachments": {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "fallback": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "image_bytes": {
                    "type": "integer"
                  },
                  "image_height": {
                    "type": "integer"
                  },
                  "image_url": {
                    "type": "string"
                  },
                  "image_width": {
                    "type": "integer"
                  }
                },
                "required": ["id"],
                "type": "object"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            },
            "blocks": {
              "$ref": "#/components/schemas/blocks"
            },
            "bot_id": {
              "items": {
                "$ref": "#/components/schemas/defs_bot_id"
              },
              "type": "array"
            },
            "bot_profile": {
              "$ref": "#/components/schemas/objs_bot_profile"
            },
            "client_msg_id": {
              "type": "string"
            },
            "comment": {
              "$ref": "#/components/schemas/objs_comment"
            },
            "display_as_bot": {
              "type": "boolean"
            },
            "icons": {
              "additionalProperties": false,
              "properties": {
                "emoji": {
                  "type": "string"
                },
                "image_64": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "inviter": {
              "$ref": "#/components/schemas/defs_user_id"
            },
            "is_delayed_message": {
              "type": "boolean"
            },
            "is_intro": {
              "type": "boolean"
            },
            "is_starred": {
              "type": "boolean"
            },
            "last_read": {
              "$ref": "#/components/schemas/defs_ts"
            },
            "latest_reply": {
              "$ref": "#/components/schemas/defs_ts"
            },
            "name": {
              "type": "string"
            },
            "old_name": {
              "type": "string"
            },
            "parent_user_id": {
              "$ref": "#/components/schemas/defs_user_id"
            },
            "permalink": {
              "format": "uri",
              "type": "string"
            },
            "pinned_to": {
              "items": {
                "$ref": "#/components/schemas/defs_channel"
              },
              "type": "array"
            },
            "purpose": {
              "type": "string"
            },
            "reply_count": {
              "type": "integer"
            },
            "reply_users": {
              "items": {
                "$ref": "#/components/schemas/defs_user_id"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            },
            "reply_users_count": {
              "type": "integer"
            },
            "source_team": {
              "$ref": "#/components/schemas/defs_workspace_id"
            },
            "subscribed": {
              "type": "boolean"
            },
            "subtype": {
              "type": "string"
            },
            "team": {
              "$ref": "#/components/schemas/defs_workspace_id"
            },
            "text": {
              "type": "string"
            },
            "thread_ts": {
              "$ref": "#/components/schemas/defs_ts"
            },
            "topic": {
              "type": "string"
            },
            "ts": {
              "$ref": "#/components/schemas/defs_ts"
            },
            "type": {
              "type": "string"
            },
            "unread_count": {
              "type": "integer"
            },
            "upload": {
              "type": "boolean"
            },
            "user": {
              "$ref": "#/components/schemas/defs_user_id"
            },
            "user_profile": {
              "$ref": "#/components/schemas/objs_user_profile_short"
            },
            "user_team": {
              "$ref": "#/components/schemas/defs_workspace_id"
            },
            "username": {
              "type": "string"
            }
          },
          "required": ["text", "type", "ts"],
          "title": "Message object",
          "type": "object"
        },
        "objs_bot_profile": {
          "additionalProperties": false,
          "properties": {
            "app_id": {
              "$ref": "#/components/schemas/defs_app_id"
            },
            "deleted": {
              "type": "boolean"
            },
            "icons": {
              "additionalProperties": false,
              "properties": {
                "image_36": {
                  "format": "uri",
                  "type": "string"
                },
                "image_48": {
                  "format": "uri",
                  "type": "string"
                },
                "image_72": {
                  "format": "uri",
                  "type": "string"
                }
              },
              "required": ["image_36", "image_48", "image_72"],
              "type": "object"
            },
            "id": {
              "$ref": "#/components/schemas/defs_bot_id"
            },
            "name": {
              "type": "string"
            },
            "team_id": {
              "$ref": "#/components/schemas/defs_team"
            },
            "updated": {
              "type": "integer"
            }
          },
          "required": [
            "id",
            "deleted",
            "name",
            "updated",
            "app_id",
            "icons",
            "team_id"
          ],
          "title": "Bot Profile Object",
          "type": "object"
        },
        "objs_comment": {
          "additionalProperties": false,
          "properties": {
            "comment": {
              "type": "string"
            },
            "created": {
              "type": "integer"
            },
            "id": {
              "$ref": "#/components/schemas/defs_comment_id"
            },
            "is_intro": {
              "type": "boolean"
            },
            "is_starred": {
              "type": "boolean"
            },
            "num_stars": {
              "type": "integer"
            },
            "pinned_info": {
              "$ref": "#/components/schemas/defs_pinned_info"
            },
            "pinned_to": {
              "items": {
                "$ref": "#/components/schemas/defs_channel"
              },
              "type": "array"
            },
            "timestamp": {
              "type": "integer"
            },
            "user": {
              "$ref": "#/components/schemas/defs_user_id"
            }
          },
          "required": [
            "id",
            "created",
            "timestamp",
            "user",
            "is_intro",
            "comment"
          ],
          "title": "File Comment Object",
          "type": "object"
        },
        "objs_comments": {
          "items": {},
          "title": "file comments object",
          "type": "array"
        },
        "objs_user_profile_short": {
          "additionalProperties": false,
          "properties": {
            "avatar_hash": {
              "type": "string"
            },
            "display_name": {
              "type": "string"
            },
            "display_name_normalized": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "image_72": {
              "format": "uri",
              "type": "string"
            },
            "is_restricted": {
              "type": "boolean"
            },
            "is_ultra_restricted": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "real_name": {
              "type": "string"
            },
            "real_name_normalized": {
              "type": "string"
            },
            "team": {
              "$ref": "#/components/schemas/defs_workspace_id"
            }
          },
          "required": [
            "avatar_hash",
            "image_72",
            "first_name",
            "real_name",
            "display_name",
            "team",
            "name",
            "is_restricted",
            "is_ultra_restricted"
          ],
          "type": "object"
        }
      }
    }
  }
}
